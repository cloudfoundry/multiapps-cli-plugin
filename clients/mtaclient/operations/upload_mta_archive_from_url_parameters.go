// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	"github.com/go-openapi/strfmt"
)

// NewUploadMtaArchiveFromUrlParams creates a new UploadMtaArchiveFromUrlParams object
// with the default values initialized.
func NewUploadMtaArchiveFromUrlParams() *UploadMtaArchiveFromUrlParams {
	return &UploadMtaArchiveFromUrlParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadMtaArchiveFromUrlParamsWithTimeout creates a new UploadMtaArchiveFromUrlParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadMtaArchiveFromUrlParamsWithTimeout(timeout time.Duration) *UploadMtaArchiveFromUrlParams {
	return &UploadMtaArchiveFromUrlParams{
		timeout: timeout,
	}
}

// NewUploadMtaArchiveFromUrlParamsWithContext creates a new UploadMtaArchiveFromUrlParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadMtaArchiveFromUrlParamsWithContext(ctx context.Context) *UploadMtaArchiveFromUrlParams {
	return &UploadMtaArchiveFromUrlParams{
		Context: ctx,
	}
}

// NewUploadMtaArchiveFromUrlParamsWithHTTPClient creates a new UploadMtaArchiveFromUrlParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadMtaArchiveFromUrlParamsWithHTTPClient(client *http.Client) *UploadMtaArchiveFromUrlParams {
	return &UploadMtaArchiveFromUrlParams{
		HTTPClient: client,
	}
}

/*UploadMtaArchiveFromUrlParams contains all the parameters to send to the API endpoint
for the upload mta archive operation typically these are written to a http.Request
*/
type UploadMtaArchiveFromUrlParams struct {

	/*Namespace
	  file namespace

	*/
	Namespace *string

	/*FileUrl
	  url to remote file

	*/
	FileUrl string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload mta file params
func (o *UploadMtaArchiveFromUrlParams) WithTimeout(timeout time.Duration) *UploadMtaArchiveFromUrlParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload mta file params
func (o *UploadMtaArchiveFromUrlParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload mta file params
func (o *UploadMtaArchiveFromUrlParams) WithContext(ctx context.Context) *UploadMtaArchiveFromUrlParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload mta file params
func (o *UploadMtaArchiveFromUrlParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload mta file params
func (o *UploadMtaArchiveFromUrlParams) WithHTTPClient(client *http.Client) *UploadMtaArchiveFromUrlParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload mta file params
func (o *UploadMtaArchiveFromUrlParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespace adds the namespace to the upload mta file params
func (o *UploadMtaArchiveFromUrlParams) WithNamespace(namespace *string) *UploadMtaArchiveFromUrlParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the upload mta file params
func (o *UploadMtaArchiveFromUrlParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithUrl adds the file url to the upload mta archive params
func (o *UploadMtaArchiveFromUrlParams) WithUrl(fileUrl string) *UploadMtaArchiveFromUrlParams {
	o.SetFileUrl(fileUrl)
	return o
}

// SetFileUrl adds the file url to the upload mta archive params
func (o *UploadMtaArchiveFromUrlParams) SetFileUrl(fileUrl string) {
	o.FileUrl = fileUrl
}

// WriteToRequest writes these params to a swagger request
func (o *UploadMtaArchiveFromUrlParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string
		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {
			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}

	}

	if err := r.SetHeaderParam("X-File-URL", o.FileUrl); err != nil {
		return err
	}

	return nil
}
